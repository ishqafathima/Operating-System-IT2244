26.05.2025 practical

1.

#include<stdio.h>
#include<stdlib.h> //for exit()
#include<unistd.h>//for sleep()

int main()
{
	printf("Program started.\n");
	
	printf("Sleeping for 3 seconds..\n");
	sleep(3);//pause for 3 seconds
	
	printf("Exiting the program. .\n");
	exit(0);//clean exit
}

[2021ict24@fedora ~]$ gcc d1.c -o d1
[2021ict24@fedora ~]$ ./d1
Program started.
Sleeping for 3 seconds..
Exiting the program. .
[2021ict24@fedora ~]$

----------------------------------------------------------------------------------------------------------------------------

2.

#include<stdio.h>
#include<stdlib.h>//for exit
#include<unistd.h>//for fork(),sleep()
#include<sys/wait.h>//for wait()

int main()
{
	pid_t pid;
	
	printf("parent process started. PID: %d\n", getpid());
	
	pid=fork();//create new child processes
	
	if(pid < 0)
	{
		perror("fork failed"); //prints system error messages based on errno, helping debug failures. Defined in <stdio.h>
		exit(1);
	}
	
	if(pid==0)
	{
		//child process
		printf("Child processes. PID: %d, sleeping for 2 seconds...\n",getpid());
		sleep(2);
		printf("Child process exiting.\n");
		exit(0);//child exits with status 0
	}
	else
	{
		//parent process
		int status;
		printf("Parent waiting for child to finish..\n");
		wait(&status);//wait for child to finish
		if(WIFEXITED(status)) //checks if a child process exited normally (via exit() or returning from main())
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status)); //gets the actual exit code (0 here)
		}
		else
		{
			printf("Child did not exit normally.\n");
		}
		printf("Parent process ending. \n");
	}
return 0;
}

[2021ict24@fedora ~]$ gcc d2.c -o d2
[2021ict24@fedora ~]$ ./d2
parent process started. PID: 10280
Parent waiting for child to finish..
Child processes. PID: 10281, sleeping for 2 seconds...
Child process exiting.
Child exited with status: 0
Parent process ending.
[2021ict24@fedora ~]$


----------------------------------------------------------------------------------------------------------------------------

3.

//First child:slept for 1 seconds
//second child:slept for 3 seconds
//parent :Both children have finished


#include<stdio.h>
#include<stdlib.h>//for exit
#include<unistd.h>//for fork(),sleep()
#include<sys/wait.h>//for wait()


int main() {
    pid_t child1, child2;

    child1 = fork(); // First child process

    if (child1 == 0) { // Child1 execution
        sleep(1);
        printf("First child: Slept for 1 second\n");
        exit(0);
    } else {
        child2 = fork(); // Second child process

        if (child2 == 0) { // Child2 execution
            sleep(3);
            printf("Second child: Slept for 3 seconds\n");
            exit(0);
        }
    }

    wait(NULL); // Wait for first child
    wait(NULL); // Wait for second child

    printf("Parent: Both children have finished\n");

    return 0;
}

[2021ict24@fedora ~]$ vi d4.c
[2021ict24@fedora ~]$ gcc d4.c -o d4
[2021ict24@fedora ~]$ ./d4
First child: Slept for 1 second
Second child: Slept for 3 seconds
Parent: Both children have finished
[2021ict24@fedora ~]$

----------------------------------------------------------------------------------------------------------------------------

4.
First child:sleeps for 2 seconds, exits with status 2
second child:sleeps for 1 seconds, exits with status 1
Parent:waits twice,and prints which child(by PID or exit code)

#include<stdio.h>
#include<stdlib.h>//for exit
#include<unistd.h>//for fork(),sleep()
#include<sys/wait.h>//for wait()

int main()
{
	 pid_t child1, child2;
    int status;

    child1 = fork(); // First child process

    if (child1 == 0) { // Child1 execution
        sleep(2);
        printf("First child: Slept for 2 seconds, exiting with status 2\n");
        exit(2);
    } else {
        child2 = fork(); // Second child process
        if (child2 == 0) { // Child2 execution
            sleep(1);
            printf("Second child: Slept for 1 second, exiting with status 1\n");
            exit(1);
        }
    }

    // Parent waits for first child and prints its exit status
    pid_t terminated_pid = wait(&status);
    printf("Parent: Child with PID %d exited with status %d\n", terminated_pid, WEXITSTATUS(status));

    // Parent waits for second child and prints its exit status
    terminated_pid = wait(&status);
    printf("Parent: Child with PID %d exited with status %d\n", terminated_pid, WEXITSTATUS(status));

    return 0;
}

[2021ict24@fedora ~]$ gcc d5.c -o d5
[2021ict24@fedora ~]$ ./d5
Second child: Slept for 1 second, exiting with status 1
Parent: Child with PID 14629 exited with status 1
First child: Slept for 2 seconds, exiting with status 2
Parent: Child with PID 14628 exited with status 2
[2021ict24@fedora ~]$

	




----------------------------------------------------------------------------------------------------------------------------

5.
The parent creates a child process
The child creates a grandchild process.
The grandchild sleeps 2 seconds  and exits with status 2.
The child waits for the grandschild, prints  its exit status, then exits with status 55.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t child, grandchild;
    int status;

    child = fork(); // Create child process

    if (child == 0) { // Child process
        grandchild = fork(); // Create grandchild process

        if (grandchild == 0) { // Grandchild process
            sleep(2);
            printf("Grandchild: Slept for 2 seconds, exiting with status 2\n");
            exit(2);
        } else { // Child process waits for grandchild
            wait(&status);
            printf("Child: Grandchild exited with status %d\n", WEXITSTATUS(status));
            exit(55);
        }
    } else { // Parent process waits for child
        wait(&status);
        printf("Parent: Child exited with status %d\n", WEXITSTATUS(status));
    }

    return 0;
}

[2021ict24@fedora ~]$ gcc d6.c -o d6
[2021ict24@fedora ~]$ ./d6
Grandchild: Slept for 2 seconds, exiting with status 2
Child: Grandchild exited with status 2
Parent: Child exited with status 55
[2021ict24@fedora ~]$
