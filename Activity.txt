
Day 03 Practical
21/03/2025



Implementation:

	1)Create a tab separeted file 
	-----------------------------
	example:
   { ~ }  » touch asd.tsv                                                                   ~
{ ~ }  » vi asd.tsv                                                                      ~
{ ~ }  » more asd.tsv                                                                                                        
	aa      45      34      56      67
	bb      34      45      12      78
	cc      78      52      87      99
	dd      56      78      90      100
	ee      34      12      13      14
	ff      78      76      77      97
	gg      31      32      33      34
	hh      22      36      78      90
	ii      78      77      88      90
	jj      45      78      100     34
.......................................................................................................................
	
	2)Extact first column from a tab seperated file
	-----------------------------------------------
	example:
	cut -d $'\t' -f1 asd.tsv
	output:
	{ Desktop }  » cut -d $'\t' -f1 asd.tsv                                                                                          
	aa
	bb
	cc
	dd
	ee
	ff
	gg
	hh
	ii
	jj

	Explain the syntax:
	cut 	 -> A command used to extract sections of a file.
	-d $'\t' -> Sets the delimiter to a tab (\t).
	$'\t' 	 ->is Bash syntax for representing a tab character.
	-f1      -> Selects the first field (column).
	ghi.tsv  -> The input file (a TSV file).
	
.........................................................................................................
	3)Extract the data using awk command
	------------------------------------
	example:
	{ ~ }  » awk '{print}' asd.tsv 
	output:
	{ ~ }  » awk '{print}' asd.tsv                                                                                                
	aa      45      34      56      67
	bb      34      45      12      78
	cc      78      52      87      99
	dd      56      78      90      100
	ee      34      12      13      14
	ff      78      76      77      97
	gg      31      32      33      34
	hh      22      36      78      90
	ii      78      77      88      90
	jj      45      78      100     34

	Explain the syntax:
	awk 	  -> A text-processing tool that reads files line by line.
	'{print}' -> The default action in awk, which prints each line as it is.
	ghi.tsv   -> The input file.
..................................................................................................................
	4)Extract the third column from tsv file using awk command
	----------------------------------------------------------
	example:
	awk '{print $3}' asd.tsv 
	output:
	{ ~ }  » awk '{print $3}' asd.tsv                                                                                        
	34
	45
	52
	78
	12
	76
	32
	36
	77
	78
	
	Explain the syntax:

	awk -> A powerful text-processing tool that processes files line by line.

	'{print $3}' ->The action performed by awk:

		print -> Tells awk to print something.

		$3 -> Refers to the third column (field) of each line.

	asd.tsv -> The input file (in this case, a tab-separated values file).
....................................................................................................................................................................
	5)To print the number of columns in in the first row (Using Default Field Separator (Whitespace))
	----------------------------------------------------
	example:
	 awk '{print NF;exit}' asd.tsv 
	output:
	{ ~ }  » awk '{print NF;exit}' asd.tsv                                                 ~ 1
     5

	
	Explain the syntax:
	awk-> A tool to process text files line by line.
	'{print NF; exit}'->
	print NF -> Prints the number of columns (fields) in the current line.
	exit -> Stops after the first line is processed.
	ghi.tsv -> The input file being processed.
.........................................................................................................................................................................................	
	
	6)To prints the number of columns in the first row of asd.tsv and then stops.(Using Tab as Field Separator (For TSV Files)
	-------------------------------------------------------------------------------------------------------------------------
	example:
	awk -F '\t' '{print NF; exit}' asd.tsv  
	output:
	{ ~ }  » awk -F '\t' '{print NF; exit}'  asd.tsv                                                                                  
	6

	Explain the syntax::
	-F '\t': Specifies the field separator (in this case, tab \t).
	{print NF; exit}:
	NF: Represents the number of fields (columns) in the current line.
	exit: Stops further processing after the first line is read.
..........................................................................................................................................................................................................
	7)Get the Specific row from the input
	-------------------------------------
	
	get the 8th row

	example:
	head -n8 asd.tsv | tail -n1
	output:
	{ ~ }  » head -n8 asd.tsv | tail -n1                                                   ~ 1
    hh      22      36      78      90


	Explain the syntax:
	head -n8 asd.tsv: Shows the first 8 lines of asd.tsv.
	| (pipe): Passes the first 8 lines to the next command.
	tail -n1: From those 8 lines, it shows the 8th line.
................................................................................................................................................................................................................................
	8)Count the number of lines with file name
	------------------------------------------
	
	exapmle:
	wc -l ghi.tsv
	output:
	{ Desktop }  » wc -l ghi.tsv                                                                                                      
	11 ghi.tsv

	Explain the syntax:
	wc: Stands for word count, but it can also count lines, words, and characters.
	-l: Option to count the lines in the file.
	ghi.tsv: The input file you want to analyze.
...............................................................................................................
	9)To get the row which have specific data
	-----------------------------------------
	example:
	head -n10 asd.tsv | grep 'cc'
	output:
	{ ~ }  » head -n10 asd.tsv |grep 'cc                                                                               
	cc      78      52      87      99

	Explain the syntax:
	head -n 10 ghi.tsv: Shows the first 10 lines of asd.tsv.
	| (pipe): Passes those 10 lines to the next command.
	grep 'cc': Filters and shows only the lines that contain 'cc'.
...........................................................................................................
	10)To get  last 2 lines
	---------------------------
	example:
	tail -n 2 asd.tsv
	output:
	 { ~ }  » tail -n 2 asd.tsv                                                             ~ 1
ii      78      77      88      90
jj      45      78      100     34


Explain the syntax:
tail -n 2 asd.tsv — 
   tail: command to display the end of a file.
    -n 2: option to show the last 2 lines.
    asd.tsv: the input file name.
	result: Shows the last 2 lines of asd.tsv.
..................................................................................................................................
 11)To get count the number of lines in asd.tsv
------------------------------------------------------
  Example:
 wc -l asd.tsv
 
 Output:
 { ~ }  » wc -l asd.tsv                                                                 ~ 1
10 asd.tsv

Explain the syntax:
wc -l asd.tsv — 
wc: word count command
-l: counts lines
asd.tsv: the file to check
Result: Shows the number of lines in asd.tsv.


	
	





	